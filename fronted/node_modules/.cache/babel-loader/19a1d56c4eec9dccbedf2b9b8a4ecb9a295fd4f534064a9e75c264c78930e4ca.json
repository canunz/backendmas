{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferremasapi\\\\fronted\\\\src\\\\contexto\\\\ContextoCarrito.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// ==========================================\n// ARCHIVO: frontend/src/contexto/ContextoCarrito.jsx\n// ==========================================\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Crear el contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContextoCarrito = /*#__PURE__*/createContext();\n\n// Tipos de acciones para el reducer\nconst TIPOS_ACCION = {\n  AGREGAR_PRODUCTO: 'AGREGAR_PRODUCTO',\n  ELIMINAR_PRODUCTO: 'ELIMINAR_PRODUCTO',\n  ACTUALIZAR_CANTIDAD: 'ACTUALIZAR_CANTIDAD',\n  LIMPIAR_CARRITO: 'LIMPIAR_CARRITO',\n  CARGAR_CARRITO: 'CARGAR_CARRITO'\n};\n\n// Estado inicial del carrito\nconst estadoInicial = {\n  items: [],\n  total: 0,\n  cantidadTotal: 0\n};\n\n// Reducer para manejar las acciones del carrito\nconst carritoReducer = (estado, accion) => {\n  switch (accion.type) {\n    case TIPOS_ACCION.AGREGAR_PRODUCTO:\n      {\n        const productoExistente = estado.items.find(item => item.id === accion.payload.id);\n        let nuevosItems;\n        if (productoExistente) {\n          // Si el producto ya existe, incrementar la cantidad\n          nuevosItems = estado.items.map(item => item.id === accion.payload.id ? {\n            ...item,\n            cantidad: item.cantidad + 1\n          } : item);\n        } else {\n          // Si es un producto nuevo, agregarlo con cantidad 1\n          nuevosItems = [...estado.items, {\n            ...accion.payload,\n            cantidad: 1\n          }];\n        }\n        return {\n          ...estado,\n          items: nuevosItems,\n          total: calcularTotal(nuevosItems),\n          cantidadTotal: calcularCantidadTotal(nuevosItems)\n        };\n      }\n    case TIPOS_ACCION.ELIMINAR_PRODUCTO:\n      {\n        const nuevosItems = estado.items.filter(item => item.id !== accion.payload);\n        return {\n          ...estado,\n          items: nuevosItems,\n          total: calcularTotal(nuevosItems),\n          cantidadTotal: calcularCantidadTotal(nuevosItems)\n        };\n      }\n    case TIPOS_ACCION.ACTUALIZAR_CANTIDAD:\n      {\n        if (accion.payload.cantidad <= 0) {\n          // Si la cantidad es 0 o menor, eliminar el producto\n          const nuevosItems = estado.items.filter(item => item.id !== accion.payload.id);\n          return {\n            ...estado,\n            items: nuevosItems,\n            total: calcularTotal(nuevosItems),\n            cantidadTotal: calcularCantidadTotal(nuevosItems)\n          };\n        }\n        const nuevosItems = estado.items.map(item => item.id === accion.payload.id ? {\n          ...item,\n          cantidad: accion.payload.cantidad\n        } : item);\n        return {\n          ...estado,\n          items: nuevosItems,\n          total: calcularTotal(nuevosItems),\n          cantidadTotal: calcularCantidadTotal(nuevosItems)\n        };\n      }\n    case TIPOS_ACCION.LIMPIAR_CARRITO:\n      {\n        return {\n          ...estadoInicial\n        };\n      }\n    case TIPOS_ACCION.CARGAR_CARRITO:\n      {\n        const items = accion.payload || [];\n        return {\n          ...estado,\n          items,\n          total: calcularTotal(items),\n          cantidadTotal: calcularCantidadTotal(items)\n        };\n      }\n    default:\n      return estado;\n  }\n};\n\n// Funciones auxiliares para cÃ¡lculos\nconst calcularTotal = items => {\n  return items.reduce((total, item) => total + item.precio * item.cantidad, 0);\n};\nconst calcularCantidadTotal = items => {\n  return items.reduce((total, item) => total + item.cantidad, 0);\n};\n\n// Proveedor del contexto\nexport const CarritoProvider = ({\n  children\n}) => {\n  _s();\n  const [estado, dispatch] = useReducer(carritoReducer, estadoInicial);\n\n  // Cargar carrito desde localStorage al iniciar\n  useEffect(() => {\n    const carritoGuardado = localStorage.getItem('carritoFerremas');\n    if (carritoGuardado) {\n      try {\n        const items = JSON.parse(carritoGuardado);\n        dispatch({\n          type: TIPOS_ACCION.CARGAR_CARRITO,\n          payload: items\n        });\n      } catch (error) {\n        console.error('Error al cargar carrito desde localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Guardar carrito en localStorage cuando cambie\n  useEffect(() => {\n    try {\n      localStorage.setItem('carritoFerremas', JSON.stringify(estado.items));\n    } catch (error) {\n      console.error('Error al guardar carrito en localStorage:', error);\n    }\n  }, [estado.items]);\n\n  // Funciones del carrito\n  const agregarAlCarrito = producto => {\n    dispatch({\n      type: TIPOS_ACCION.AGREGAR_PRODUCTO,\n      payload: producto\n    });\n  };\n  const eliminarDelCarrito = productoId => {\n    dispatch({\n      type: TIPOS_ACCION.ELIMINAR_PRODUCTO,\n      payload: productoId\n    });\n  };\n  const actualizarCantidad = (productoId, cantidad) => {\n    dispatch({\n      type: TIPOS_ACCION.ACTUALIZAR_CANTIDAD,\n      payload: {\n        id: productoId,\n        cantidad\n      }\n    });\n  };\n  const limpiarCarrito = () => {\n    dispatch({\n      type: TIPOS_ACCION.LIMPIAR_CARRITO\n    });\n  };\n  const obtenerTotal = () => {\n    return estado.total;\n  };\n  const obtenerCantidadTotal = () => {\n    return estado.cantidadTotal;\n  };\n  const obtenerProducto = productoId => {\n    return estado.items.find(item => item.id === productoId);\n  };\n  const estaEnCarrito = productoId => {\n    return estado.items.some(item => item.id === productoId);\n  };\n  const obtenerCantidadProducto = productoId => {\n    const producto = estado.items.find(item => item.id === productoId);\n    return producto ? producto.cantidad : 0;\n  };\n\n  // Valor del contexto\n  const valorContexto = {\n    // Estado\n    carrito: estado.items,\n    total: estado.total,\n    cantidadTotal: estado.cantidadTotal,\n    // Funciones\n    agregarAlCarrito,\n    eliminarDelCarrito,\n    actualizarCantidad,\n    limpiarCarrito,\n    obtenerTotal,\n    obtenerCantidadTotal,\n    obtenerProducto,\n    estaEnCarrito,\n    obtenerCantidadProducto\n  };\n  return /*#__PURE__*/_jsxDEV(ContextoCarrito.Provider, {\n    value: valorContexto,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para usar el contexto del carrito\n_s(CarritoProvider, \"uq2YMvIV0qhq1E12tcGRgUv9w/k=\");\n_c = CarritoProvider;\nexport const useCarrito = () => {\n  _s2();\n  const contexto = useContext(ContextoCarrito);\n  if (!contexto) {\n    throw new Error('useCarrito debe ser usado dentro de un CarritoProvider');\n  }\n  return contexto;\n};\n_s2(useCarrito, \"ZR0oSHYnh86JaJQkXCiE4u/O/jw=\");\nexport default ContextoCarrito;\nvar _c;\n$RefreshReg$(_c, \"CarritoProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","ContextoCarrito","TIPOS_ACCION","AGREGAR_PRODUCTO","ELIMINAR_PRODUCTO","ACTUALIZAR_CANTIDAD","LIMPIAR_CARRITO","CARGAR_CARRITO","estadoInicial","items","total","cantidadTotal","carritoReducer","estado","accion","type","productoExistente","find","item","id","payload","nuevosItems","map","cantidad","calcularTotal","calcularCantidadTotal","filter","reduce","precio","CarritoProvider","children","_s","dispatch","carritoGuardado","localStorage","getItem","JSON","parse","error","console","setItem","stringify","agregarAlCarrito","producto","eliminarDelCarrito","productoId","actualizarCantidad","limpiarCarrito","obtenerTotal","obtenerCantidadTotal","obtenerProducto","estaEnCarrito","some","obtenerCantidadProducto","valorContexto","carrito","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCarrito","_s2","contexto","Error","$RefreshReg$"],"sources":["C:/ferremasapi/fronted/src/contexto/ContextoCarrito.jsx"],"sourcesContent":["// ==========================================\r\n// ARCHIVO: frontend/src/contexto/ContextoCarrito.jsx\r\n// ==========================================\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// Crear el contexto\r\nconst ContextoCarrito = createContext();\r\n\r\n// Tipos de acciones para el reducer\r\nconst TIPOS_ACCION = {\r\n  AGREGAR_PRODUCTO: 'AGREGAR_PRODUCTO',\r\n  ELIMINAR_PRODUCTO: 'ELIMINAR_PRODUCTO',\r\n  ACTUALIZAR_CANTIDAD: 'ACTUALIZAR_CANTIDAD',\r\n  LIMPIAR_CARRITO: 'LIMPIAR_CARRITO',\r\n  CARGAR_CARRITO: 'CARGAR_CARRITO'\r\n};\r\n\r\n// Estado inicial del carrito\r\nconst estadoInicial = {\r\n  items: [],\r\n  total: 0,\r\n  cantidadTotal: 0\r\n};\r\n\r\n// Reducer para manejar las acciones del carrito\r\nconst carritoReducer = (estado, accion) => {\r\n  switch (accion.type) {\r\n    case TIPOS_ACCION.AGREGAR_PRODUCTO: {\r\n      const productoExistente = estado.items.find(item => item.id === accion.payload.id);\r\n      \r\n      let nuevosItems;\r\n      if (productoExistente) {\r\n        // Si el producto ya existe, incrementar la cantidad\r\n        nuevosItems = estado.items.map(item =>\r\n          item.id === accion.payload.id\r\n            ? { ...item, cantidad: item.cantidad + 1 }\r\n            : item\r\n        );\r\n      } else {\r\n        // Si es un producto nuevo, agregarlo con cantidad 1\r\n        nuevosItems = [...estado.items, { ...accion.payload, cantidad: 1 }];\r\n      }\r\n\r\n      return {\r\n        ...estado,\r\n        items: nuevosItems,\r\n        total: calcularTotal(nuevosItems),\r\n        cantidadTotal: calcularCantidadTotal(nuevosItems)\r\n      };\r\n    }\r\n\r\n    case TIPOS_ACCION.ELIMINAR_PRODUCTO: {\r\n      const nuevosItems = estado.items.filter(item => item.id !== accion.payload);\r\n      return {\r\n        ...estado,\r\n        items: nuevosItems,\r\n        total: calcularTotal(nuevosItems),\r\n        cantidadTotal: calcularCantidadTotal(nuevosItems)\r\n      };\r\n    }\r\n\r\n    case TIPOS_ACCION.ACTUALIZAR_CANTIDAD: {\r\n      if (accion.payload.cantidad <= 0) {\r\n        // Si la cantidad es 0 o menor, eliminar el producto\r\n        const nuevosItems = estado.items.filter(item => item.id !== accion.payload.id);\r\n        return {\r\n          ...estado,\r\n          items: nuevosItems,\r\n          total: calcularTotal(nuevosItems),\r\n          cantidadTotal: calcularCantidadTotal(nuevosItems)\r\n        };\r\n      }\r\n\r\n      const nuevosItems = estado.items.map(item =>\r\n        item.id === accion.payload.id\r\n          ? { ...item, cantidad: accion.payload.cantidad }\r\n          : item\r\n      );\r\n\r\n      return {\r\n        ...estado,\r\n        items: nuevosItems,\r\n        total: calcularTotal(nuevosItems),\r\n        cantidadTotal: calcularCantidadTotal(nuevosItems)\r\n      };\r\n    }\r\n\r\n    case TIPOS_ACCION.LIMPIAR_CARRITO: {\r\n      return {\r\n        ...estadoInicial\r\n      };\r\n    }\r\n\r\n    case TIPOS_ACCION.CARGAR_CARRITO: {\r\n      const items = accion.payload || [];\r\n      return {\r\n        ...estado,\r\n        items,\r\n        total: calcularTotal(items),\r\n        cantidadTotal: calcularCantidadTotal(items)\r\n      };\r\n    }\r\n\r\n    default:\r\n      return estado;\r\n  }\r\n};\r\n\r\n// Funciones auxiliares para cÃ¡lculos\r\nconst calcularTotal = (items) => {\r\n  return items.reduce((total, item) => total + (item.precio * item.cantidad), 0);\r\n};\r\n\r\nconst calcularCantidadTotal = (items) => {\r\n  return items.reduce((total, item) => total + item.cantidad, 0);\r\n};\r\n\r\n// Proveedor del contexto\r\nexport const CarritoProvider = ({ children }) => {\r\n  const [estado, dispatch] = useReducer(carritoReducer, estadoInicial);\r\n\r\n  // Cargar carrito desde localStorage al iniciar\r\n  useEffect(() => {\r\n    const carritoGuardado = localStorage.getItem('carritoFerremas');\r\n    if (carritoGuardado) {\r\n      try {\r\n        const items = JSON.parse(carritoGuardado);\r\n        dispatch({ type: TIPOS_ACCION.CARGAR_CARRITO, payload: items });\r\n      } catch (error) {\r\n        console.error('Error al cargar carrito desde localStorage:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Guardar carrito en localStorage cuando cambie\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('carritoFerremas', JSON.stringify(estado.items));\r\n    } catch (error) {\r\n      console.error('Error al guardar carrito en localStorage:', error);\r\n    }\r\n  }, [estado.items]);\r\n\r\n  // Funciones del carrito\r\n  const agregarAlCarrito = (producto) => {\r\n    dispatch({ \r\n      type: TIPOS_ACCION.AGREGAR_PRODUCTO, \r\n      payload: producto \r\n    });\r\n  };\r\n\r\n  const eliminarDelCarrito = (productoId) => {\r\n    dispatch({ \r\n      type: TIPOS_ACCION.ELIMINAR_PRODUCTO, \r\n      payload: productoId \r\n    });\r\n  };\r\n\r\n  const actualizarCantidad = (productoId, cantidad) => {\r\n    dispatch({ \r\n      type: TIPOS_ACCION.ACTUALIZAR_CANTIDAD, \r\n      payload: { id: productoId, cantidad } \r\n    });\r\n  };\r\n\r\n  const limpiarCarrito = () => {\r\n    dispatch({ type: TIPOS_ACCION.LIMPIAR_CARRITO });\r\n  };\r\n\r\n  const obtenerTotal = () => {\r\n    return estado.total;\r\n  };\r\n\r\n  const obtenerCantidadTotal = () => {\r\n    return estado.cantidadTotal;\r\n  };\r\n\r\n  const obtenerProducto = (productoId) => {\r\n    return estado.items.find(item => item.id === productoId);\r\n  };\r\n\r\n  const estaEnCarrito = (productoId) => {\r\n    return estado.items.some(item => item.id === productoId);\r\n  };\r\n\r\n  const obtenerCantidadProducto = (productoId) => {\r\n    const producto = estado.items.find(item => item.id === productoId);\r\n    return producto ? producto.cantidad : 0;\r\n  };\r\n\r\n  // Valor del contexto\r\n  const valorContexto = {\r\n    // Estado\r\n    carrito: estado.items,\r\n    total: estado.total,\r\n    cantidadTotal: estado.cantidadTotal,\r\n    \r\n    // Funciones\r\n    agregarAlCarrito,\r\n    eliminarDelCarrito,\r\n    actualizarCantidad,\r\n    limpiarCarrito,\r\n    obtenerTotal,\r\n    obtenerCantidadTotal,\r\n    obtenerProducto,\r\n    estaEnCarrito,\r\n    obtenerCantidadProducto\r\n  };\r\n\r\n  return (\r\n    <ContextoCarrito.Provider value={valorContexto}>\r\n      {children}\r\n    </ContextoCarrito.Provider>\r\n  );\r\n};\r\n\r\n// Hook personalizado para usar el contexto del carrito\r\nexport const useCarrito = () => {\r\n  const contexto = useContext(ContextoCarrito);\r\n  \r\n  if (!contexto) {\r\n    throw new Error('useCarrito debe ser usado dentro de un CarritoProvider');\r\n  }\r\n  \r\n  return contexto;\r\n};\r\n\r\nexport default ContextoCarrito;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}