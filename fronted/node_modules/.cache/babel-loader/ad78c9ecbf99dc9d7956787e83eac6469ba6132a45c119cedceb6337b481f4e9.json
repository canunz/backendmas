{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { onErrorDefault, onReadyDefault } from '../util/initial';\nimport { initBrick } from '../util/renderBrick';\nimport { DEBOUNCE_TIME_RENDER } from '../util/constants';\n// /**\n//  * Status Screen Brick allows you to show buyer the status of a purchase made with any payment method provided by Checkout Bricks.\n//  *\n//  * Usage:\n//  *\n//  * ```ts\n//  * import StatusScreen, {initMercadoPago} from '@mercadopago/sdk-react'\n//  *\n//  * initMercadoPago('YOUR_PUBLIC_KEY')\n//  *\n//  * const Example = () => {\n//  *   return(\n//  *     <StatusScreen\n//  *       initialization={{ preferenceId: '<PREFERENCE_ID>'}} // PREFERENCE_ID generated in backend\n//  *       onReady={() => {}} // Callback called when Brick is ready\n//  *       onError={() => {}} // Callback called for all Brick error cases\n//  *     />\n//  *   )\n//  * }\n//  * export default Example\n//  * ```\n//  *\n//  * @see {@link https://www.mercadopago.com/developers/en/docs/checkout-bricks/status-screen-brick/introduction Status Screen Brick documentation} for more information.\n//  */\nconst StatusScreen = ({\n  onReady = onReadyDefault,\n  onError = onErrorDefault,\n  customization,\n  initialization,\n  locale,\n  id = 'statusScreenBrick_container'\n}) => {\n  useEffect(() => {\n    // Status Screen uses a debounce to prevent unnecessary reRenders.\n    const StatusScreenBrickConfig = {\n      settings: {\n        initialization,\n        customization,\n        locale,\n        callbacks: {\n          onReady,\n          onError\n        }\n      },\n      name: 'statusScreen',\n      containerId: id,\n      controller: 'statusScreenBrickController'\n    };\n    const timer = setTimeout(() => {\n      initBrick(StatusScreenBrickConfig);\n    }, DEBOUNCE_TIME_RENDER);\n    return () => {\n      var _a;\n      clearTimeout(timer);\n      (_a = window.statusScreenBrickController) === null || _a === void 0 ? void 0 : _a.unmount();\n    };\n  }, [initialization, customization, onReady, onError]);\n  return React.createElement(\"div\", {\n    id: id\n  });\n};\nexport default StatusScreen;","map":{"version":3,"names":["React","useEffect","onErrorDefault","onReadyDefault","initBrick","DEBOUNCE_TIME_RENDER","StatusScreen","onReady","onError","customization","initialization","locale","id","StatusScreenBrickConfig","settings","callbacks","name","containerId","controller","timer","setTimeout","_a","clearTimeout","window","statusScreenBrickController","unmount","createElement"],"sources":["C:/ferremasapi/fronted/node_modules/@mercadopago/sdk-react/esm/bricks/statusScreen/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { onErrorDefault, onReadyDefault } from '../util/initial';\nimport { initBrick } from '../util/renderBrick';\nimport { DEBOUNCE_TIME_RENDER } from '../util/constants';\n// /**\n//  * Status Screen Brick allows you to show buyer the status of a purchase made with any payment method provided by Checkout Bricks.\n//  *\n//  * Usage:\n//  *\n//  * ```ts\n//  * import StatusScreen, {initMercadoPago} from '@mercadopago/sdk-react'\n//  *\n//  * initMercadoPago('YOUR_PUBLIC_KEY')\n//  *\n//  * const Example = () => {\n//  *   return(\n//  *     <StatusScreen\n//  *       initialization={{ preferenceId: '<PREFERENCE_ID>'}} // PREFERENCE_ID generated in backend\n//  *       onReady={() => {}} // Callback called when Brick is ready\n//  *       onError={() => {}} // Callback called for all Brick error cases\n//  *     />\n//  *   )\n//  * }\n//  * export default Example\n//  * ```\n//  *\n//  * @see {@link https://www.mercadopago.com/developers/en/docs/checkout-bricks/status-screen-brick/introduction Status Screen Brick documentation} for more information.\n//  */\nconst StatusScreen = ({ onReady = onReadyDefault, onError = onErrorDefault, customization, initialization, locale, id = 'statusScreenBrick_container', }) => {\n    useEffect(() => {\n        // Status Screen uses a debounce to prevent unnecessary reRenders.\n        const StatusScreenBrickConfig = {\n            settings: {\n                initialization,\n                customization,\n                locale,\n                callbacks: {\n                    onReady,\n                    onError,\n                },\n            },\n            name: 'statusScreen',\n            containerId: id,\n            controller: 'statusScreenBrickController',\n        };\n        const timer = setTimeout(() => {\n            initBrick(StatusScreenBrickConfig);\n        }, DEBOUNCE_TIME_RENDER);\n        return () => {\n            var _a;\n            clearTimeout(timer);\n            (_a = window.statusScreenBrickController) === null || _a === void 0 ? void 0 : _a.unmount();\n        };\n    }, [initialization, customization, onReady, onError]);\n    return React.createElement(\"div\", { id: id });\n};\nexport default StatusScreen;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,EAAEC,cAAc,QAAQ,iBAAiB;AAChE,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO,GAAGJ,cAAc;EAAEK,OAAO,GAAGN,cAAc;EAAEO,aAAa;EAAEC,cAAc;EAAEC,MAAM;EAAEC,EAAE,GAAG;AAA+B,CAAC,KAAK;EACzJX,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,uBAAuB,GAAG;MAC5BC,QAAQ,EAAE;QACNJ,cAAc;QACdD,aAAa;QACbE,MAAM;QACNI,SAAS,EAAE;UACPR,OAAO;UACPC;QACJ;MACJ,CAAC;MACDQ,IAAI,EAAE,cAAc;MACpBC,WAAW,EAAEL,EAAE;MACfM,UAAU,EAAE;IAChB,CAAC;IACD,MAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC3BhB,SAAS,CAACS,uBAAuB,CAAC;IACtC,CAAC,EAAER,oBAAoB,CAAC;IACxB,OAAO,MAAM;MACT,IAAIgB,EAAE;MACNC,YAAY,CAACH,KAAK,CAAC;MACnB,CAACE,EAAE,GAAGE,MAAM,CAACC,2BAA2B,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,OAAO,CAAC,CAAC;IAC/F,CAAC;EACL,CAAC,EAAE,CAACf,cAAc,EAAED,aAAa,EAAEF,OAAO,EAAEC,OAAO,CAAC,CAAC;EACrD,OAAOR,KAAK,CAAC0B,aAAa,CAAC,KAAK,EAAE;IAAEd,EAAE,EAAEA;EAAG,CAAC,CAAC;AACjD,CAAC;AACD,eAAeN,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}