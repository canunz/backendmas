{"ast":null,"code":"var _process$env$REACT_AP;\n// ==========================================\n// ARCHIVO: frontend/src/servicios/api.js (COMPLETO Y CORREGIDO)\n// ==========================================\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst SERVER_BASE_URL = ((_process$env$REACT_AP = process.env.REACT_APP_API_URL) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.replace('/api', '')) || 'http://localhost:3001';\n\n// Función base para hacer requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || `Error ${response.status}: ${response.statusText}`);\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en ${endpoint}:`, error);\n\n    // Si es un error de red, mostrar mensaje más amigable\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      throw new Error('No se pudo conectar con el servidor. Verifica que el backend esté corriendo en http://localhost:3001');\n    }\n    throw error;\n  }\n};\n\n// ==========================================\n// API DE PRODUCTOS - SOLO BD REAL\n// ==========================================\nexport const productosAPI = {\n  // Obtener todos los productos REALES de tu BD\n  obtenerTodos: async (filtros = {}) => {\n    const params = new URLSearchParams();\n    Object.keys(filtros).forEach(key => {\n      if (filtros[key] !== '' && filtros[key] !== null && filtros[key] !== undefined) {\n        params.append(key, filtros[key]);\n      }\n    });\n    const queryString = params.toString();\n    const endpoint = `/productos${queryString ? `?${queryString}` : ''}`;\n    return await apiRequest(endpoint);\n  },\n  // Obtener producto específico por ID\n  obtenerPorId: async id => {\n    if (!id) {\n      throw new Error('ID del producto es requerido');\n    }\n    return await apiRequest(`/productos/${id}`);\n  },\n  // Crear nuevo producto en tu BD\n  crear: async producto => {\n    if (!producto.nombre || !producto.precio) {\n      throw new Error('Nombre y precio son campos obligatorios');\n    }\n    return await apiRequest('/productos', {\n      method: 'POST',\n      body: JSON.stringify(producto)\n    });\n  },\n  // Actualizar producto existente\n  actualizar: async (id, producto) => {\n    if (!id) {\n      throw new Error('ID del producto es requerido');\n    }\n    return await apiRequest(`/productos/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(producto)\n    });\n  },\n  // Eliminar producto (soft delete)\n  eliminar: async id => {\n    if (!id) {\n      throw new Error('ID del producto es requerido');\n    }\n    return await apiRequest(`/productos/${id}`, {\n      method: 'DELETE'\n    });\n  },\n  // Obtener categorías REALES de tu BD\n  obtenerCategorias: async () => {\n    return await apiRequest('/productos/categorias');\n  },\n  // Obtener marcas REALES de tu BD\n  obtenerMarcas: async () => {\n    return await apiRequest('/productos/marcas');\n  },\n  // Buscar productos con término y filtros\n  buscar: async (termino, filtros = {}) => {\n    return await productosAPI.obtenerTodos({\n      q: termino,\n      ...filtros\n    });\n  }\n};\n\n// ==========================================\n// API DEL DASHBOARD - SOLO ESTADÍSTICAS REALES\n// ==========================================\nexport const dashboardAPI = {\n  // Obtener estadísticas REALES de tu BD\n  obtenerEstadisticas: async () => {\n    return await apiRequest('/dashboard/stats');\n  }\n};\n\n// ==========================================\n// API DE SISTEMA - SOLO FUNCIONES BÁSICAS\n// ==========================================\nexport const sistemaAPI = {\n  // Verificar estado del servidor\n  healthCheck: async () => {\n    const response = await fetch(`${SERVER_BASE_URL}/health`);\n    return await response.json();\n  },\n  // Test básico de conectividad\n  test: async () => {\n    return await apiRequest('/test');\n  },\n  // Información del servidor\n  infoServidor: async () => {\n    const response = await fetch(SERVER_BASE_URL);\n    return await response.json();\n  }\n};\n\n// ==========================================\n// FUNCIÓN DE DIAGNÓSTICO (SIN DEMOS)\n// ==========================================\nexport const debugAPI = {\n  // Probar conexión con la API real\n  probarConexion: async () => {\n    console.log('🧪 Probando conexión con la API...');\n    const resultados = {\n      servidor: null,\n      productos: null,\n      categorias: null,\n      marcas: null,\n      estadisticas: null\n    };\n    try {\n      // Test servidor\n      console.log('1. Probando conexión al servidor...');\n      try {\n        const servidor = await sistemaAPI.test();\n        resultados.servidor = {\n          success: true,\n          data: servidor\n        };\n      } catch (error) {\n        resultados.servidor = {\n          success: false,\n          error: error.message\n        };\n      }\n\n      // Test productos\n      console.log('2. Probando endpoint de productos...');\n      try {\n        var _productos$data;\n        const productos = await productosAPI.obtenerTodos();\n        resultados.productos = {\n          success: true,\n          total: ((_productos$data = productos.data) === null || _productos$data === void 0 ? void 0 : _productos$data.length) || 0\n        };\n      } catch (error) {\n        resultados.productos = {\n          success: false,\n          error: error.message\n        };\n      }\n\n      // Test categorías\n      console.log('3. Probando endpoint de categorías...');\n      try {\n        var _categorias$data;\n        const categorias = await productosAPI.obtenerCategorias();\n        resultados.categorias = {\n          success: true,\n          total: ((_categorias$data = categorias.data) === null || _categorias$data === void 0 ? void 0 : _categorias$data.length) || 0\n        };\n      } catch (error) {\n        resultados.categorias = {\n          success: false,\n          error: error.message\n        };\n      }\n\n      // Test marcas\n      console.log('4. Probando endpoint de marcas...');\n      try {\n        var _marcas$data;\n        const marcas = await productosAPI.obtenerMarcas();\n        resultados.marcas = {\n          success: true,\n          total: ((_marcas$data = marcas.data) === null || _marcas$data === void 0 ? void 0 : _marcas$data.length) || 0\n        };\n      } catch (error) {\n        resultados.marcas = {\n          success: false,\n          error: error.message\n        };\n      }\n\n      // Test estadísticas\n      console.log('5. Probando endpoint de estadísticas...');\n      try {\n        const stats = await dashboardAPI.obtenerEstadisticas();\n        resultados.estadisticas = {\n          success: true,\n          data: stats.data\n        };\n      } catch (error) {\n        resultados.estadisticas = {\n          success: false,\n          error: error.message\n        };\n      }\n    } catch (error) {\n      console.error('❌ Error general en las pruebas:', error);\n    }\n    console.log('📊 Resultados de las pruebas:', resultados);\n    return resultados;\n  }\n};\n\n// ==========================================\n// FUNCIONES PARA TESTBACKEND COMPONENT\n// ==========================================\nexport const testBackendConnection = async () => {\n  try {\n    const response = await fetch(`${SERVER_BASE_URL}/health`);\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        message: 'Conexión exitosa con el backend',\n        data: data\n      };\n    } else {\n      return {\n        success: false,\n        message: 'Error en la respuesta del backend',\n        error: data\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      message: 'No se pudo conectar con el backend',\n      error: error.message\n    };\n  }\n};\nexport const testDatabaseConnection = async () => {\n  try {\n    const health = await sistemaAPI.healthCheck();\n    const stats = await dashboardAPI.obtenerEstadisticas();\n    return {\n      success: true,\n      message: 'Conexión a base de datos exitosa',\n      data: {\n        health: health,\n        stats: stats.data\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Error en la conexión a base de datos',\n      error: error.message\n    };\n  }\n};\nexport const testProductosEndpoint = async () => {\n  try {\n    var _productos$data2, _categorias$data2, _marcas$data2;\n    const productos = await productosAPI.obtenerTodos();\n    const categorias = await productosAPI.obtenerCategorias();\n    const marcas = await productosAPI.obtenerMarcas();\n    return {\n      success: true,\n      message: 'Endpoints de productos funcionando',\n      data: {\n        productos: ((_productos$data2 = productos.data) === null || _productos$data2 === void 0 ? void 0 : _productos$data2.length) || 0,\n        categorias: ((_categorias$data2 = categorias.data) === null || _categorias$data2 === void 0 ? void 0 : _categorias$data2.length) || 0,\n        marcas: ((_marcas$data2 = marcas.data) === null || _marcas$data2 === void 0 ? void 0 : _marcas$data2.length) || 0\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Error en endpoints de productos',\n      error: error.message\n    };\n  }\n};\n\n// ==========================================\n// OBJETO PRINCIPAL DE LA API\n// ==========================================\nconst api = {\n  productos: productosAPI,\n  dashboard: dashboardAPI,\n  sistema: sistemaAPI,\n  debug: debugAPI\n};\n\n// Exportación por defecto\nexport default api;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","SERVER_BASE_URL","_process$env$REACT_AP","replace","apiRequest","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","message","status","statusText","error","console","name","includes","productosAPI","obtenerTodos","filtros","params","URLSearchParams","Object","keys","forEach","key","undefined","append","queryString","toString","obtenerPorId","id","crear","producto","nombre","precio","method","body","JSON","stringify","actualizar","eliminar","obtenerCategorias","obtenerMarcas","buscar","termino","q","dashboardAPI","obtenerEstadisticas","sistemaAPI","healthCheck","test","infoServidor","debugAPI","probarConexion","log","resultados","servidor","productos","categorias","marcas","estadisticas","success","_productos$data","total","length","_categorias$data","_marcas$data","stats","testBackendConnection","testDatabaseConnection","health","testProductosEndpoint","_productos$data2","_categorias$data2","_marcas$data2","api","dashboard","sistema","debug"],"sources":["C:/ferremasapi/fronted/src/servicios/api.js"],"sourcesContent":["// ==========================================\r\n// ARCHIVO: frontend/src/servicios/api.js (COMPLETO Y CORREGIDO)\r\n// ==========================================\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\nconst SERVER_BASE_URL = process.env.REACT_APP_API_URL?.replace('/api', '') || 'http://localhost:3001';\r\n\r\n// Función base para hacer requests\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.message || `Error ${response.status}: ${response.statusText}`);\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error en ${endpoint}:`, error);\r\n    \r\n    // Si es un error de red, mostrar mensaje más amigable\r\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n      throw new Error('No se pudo conectar con el servidor. Verifica que el backend esté corriendo en http://localhost:3001');\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// ==========================================\r\n// API DE PRODUCTOS - SOLO BD REAL\r\n// ==========================================\r\nexport const productosAPI = {\r\n  // Obtener todos los productos REALES de tu BD\r\n  obtenerTodos: async (filtros = {}) => {\r\n    const params = new URLSearchParams();\r\n    \r\n    Object.keys(filtros).forEach(key => {\r\n      if (filtros[key] !== '' && filtros[key] !== null && filtros[key] !== undefined) {\r\n        params.append(key, filtros[key]);\r\n      }\r\n    });\r\n    \r\n    const queryString = params.toString();\r\n    const endpoint = `/productos${queryString ? `?${queryString}` : ''}`;\r\n    \r\n    return await apiRequest(endpoint);\r\n  },\r\n\r\n  // Obtener producto específico por ID\r\n  obtenerPorId: async (id) => {\r\n    if (!id) {\r\n      throw new Error('ID del producto es requerido');\r\n    }\r\n    return await apiRequest(`/productos/${id}`);\r\n  },\r\n\r\n  // Crear nuevo producto en tu BD\r\n  crear: async (producto) => {\r\n    if (!producto.nombre || !producto.precio) {\r\n      throw new Error('Nombre y precio son campos obligatorios');\r\n    }\r\n    \r\n    return await apiRequest('/productos', {\r\n      method: 'POST',\r\n      body: JSON.stringify(producto),\r\n    });\r\n  },\r\n\r\n  // Actualizar producto existente\r\n  actualizar: async (id, producto) => {\r\n    if (!id) {\r\n      throw new Error('ID del producto es requerido');\r\n    }\r\n    \r\n    return await apiRequest(`/productos/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(producto),\r\n    });\r\n  },\r\n\r\n  // Eliminar producto (soft delete)\r\n  eliminar: async (id) => {\r\n    if (!id) {\r\n      throw new Error('ID del producto es requerido');\r\n    }\r\n    \r\n    return await apiRequest(`/productos/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n\r\n  // Obtener categorías REALES de tu BD\r\n  obtenerCategorias: async () => {\r\n    return await apiRequest('/productos/categorias');\r\n  },\r\n\r\n  // Obtener marcas REALES de tu BD\r\n  obtenerMarcas: async () => {\r\n    return await apiRequest('/productos/marcas');\r\n  },\r\n\r\n  // Buscar productos con término y filtros\r\n  buscar: async (termino, filtros = {}) => {\r\n    return await productosAPI.obtenerTodos({\r\n      q: termino,\r\n      ...filtros\r\n    });\r\n  },\r\n};\r\n\r\n// ==========================================\r\n// API DEL DASHBOARD - SOLO ESTADÍSTICAS REALES\r\n// ==========================================\r\nexport const dashboardAPI = {\r\n  // Obtener estadísticas REALES de tu BD\r\n  obtenerEstadisticas: async () => {\r\n    return await apiRequest('/dashboard/stats');\r\n  },\r\n};\r\n\r\n// ==========================================\r\n// API DE SISTEMA - SOLO FUNCIONES BÁSICAS\r\n// ==========================================\r\nexport const sistemaAPI = {\r\n  // Verificar estado del servidor\r\n  healthCheck: async () => {\r\n    const response = await fetch(`${SERVER_BASE_URL}/health`);\r\n    return await response.json();\r\n  },\r\n  \r\n  // Test básico de conectividad\r\n  test: async () => {\r\n    return await apiRequest('/test');\r\n  },\r\n  \r\n  // Información del servidor\r\n  infoServidor: async () => {\r\n    const response = await fetch(SERVER_BASE_URL);\r\n    return await response.json();\r\n  },\r\n};\r\n\r\n// ==========================================\r\n// FUNCIÓN DE DIAGNÓSTICO (SIN DEMOS)\r\n// ==========================================\r\nexport const debugAPI = {\r\n  // Probar conexión con la API real\r\n  probarConexion: async () => {\r\n    console.log('🧪 Probando conexión con la API...');\r\n    \r\n    const resultados = {\r\n      servidor: null,\r\n      productos: null,\r\n      categorias: null,\r\n      marcas: null,\r\n      estadisticas: null,\r\n    };\r\n    \r\n    try {\r\n      // Test servidor\r\n      console.log('1. Probando conexión al servidor...');\r\n      try {\r\n        const servidor = await sistemaAPI.test();\r\n        resultados.servidor = { success: true, data: servidor };\r\n      } catch (error) {\r\n        resultados.servidor = { success: false, error: error.message };\r\n      }\r\n      \r\n      // Test productos\r\n      console.log('2. Probando endpoint de productos...');\r\n      try {\r\n        const productos = await productosAPI.obtenerTodos();\r\n        resultados.productos = { success: true, total: productos.data?.length || 0 };\r\n      } catch (error) {\r\n        resultados.productos = { success: false, error: error.message };\r\n      }\r\n      \r\n      // Test categorías\r\n      console.log('3. Probando endpoint de categorías...');\r\n      try {\r\n        const categorias = await productosAPI.obtenerCategorias();\r\n        resultados.categorias = { success: true, total: categorias.data?.length || 0 };\r\n      } catch (error) {\r\n        resultados.categorias = { success: false, error: error.message };\r\n      }\r\n      \r\n      // Test marcas\r\n      console.log('4. Probando endpoint de marcas...');\r\n      try {\r\n        const marcas = await productosAPI.obtenerMarcas();\r\n        resultados.marcas = { success: true, total: marcas.data?.length || 0 };\r\n      } catch (error) {\r\n        resultados.marcas = { success: false, error: error.message };\r\n      }\r\n      \r\n      // Test estadísticas\r\n      console.log('5. Probando endpoint de estadísticas...');\r\n      try {\r\n        const stats = await dashboardAPI.obtenerEstadisticas();\r\n        resultados.estadisticas = { success: true, data: stats.data };\r\n      } catch (error) {\r\n        resultados.estadisticas = { success: false, error: error.message };\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error general en las pruebas:', error);\r\n    }\r\n    \r\n    console.log('📊 Resultados de las pruebas:', resultados);\r\n    return resultados;\r\n  },\r\n};\r\n\r\n// ==========================================\r\n// FUNCIONES PARA TESTBACKEND COMPONENT\r\n// ==========================================\r\nexport const testBackendConnection = async () => {\r\n  try {\r\n    const response = await fetch(`${SERVER_BASE_URL}/health`);\r\n    const data = await response.json();\r\n    \r\n    if (response.ok) {\r\n      return {\r\n        success: true,\r\n        message: 'Conexión exitosa con el backend',\r\n        data: data\r\n      };\r\n    } else {\r\n      return {\r\n        success: false,\r\n        message: 'Error en la respuesta del backend',\r\n        error: data\r\n      };\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      message: 'No se pudo conectar con el backend',\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\nexport const testDatabaseConnection = async () => {\r\n  try {\r\n    const health = await sistemaAPI.healthCheck();\r\n    const stats = await dashboardAPI.obtenerEstadisticas();\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Conexión a base de datos exitosa',\r\n      data: {\r\n        health: health,\r\n        stats: stats.data\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      message: 'Error en la conexión a base de datos',\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\nexport const testProductosEndpoint = async () => {\r\n  try {\r\n    const productos = await productosAPI.obtenerTodos();\r\n    const categorias = await productosAPI.obtenerCategorias();\r\n    const marcas = await productosAPI.obtenerMarcas();\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Endpoints de productos funcionando',\r\n      data: {\r\n        productos: productos.data?.length || 0,\r\n        categorias: categorias.data?.length || 0,\r\n        marcas: marcas.data?.length || 0\r\n      }\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      message: 'Error en endpoints de productos',\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// ==========================================\r\n// OBJETO PRINCIPAL DE LA API\r\n// ==========================================\r\nconst api = {\r\n  productos: productosAPI,\r\n  dashboard: dashboardAPI,\r\n  sistema: sistemaAPI,\r\n  debug: debugAPI,\r\n};\r\n\r\n// Exportación por defecto\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}