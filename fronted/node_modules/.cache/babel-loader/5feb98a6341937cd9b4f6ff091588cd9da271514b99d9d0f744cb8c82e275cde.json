{"ast":null,"code":"import api from './api';\nexport const servicioPagos = {\n  // Crear preferencia de pago\n  crearPreferencia: async (items, comprador) => {\n    try {\n      const response = await api.post('/pagos/crear-preferencia', {\n        items,\n        comprador\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al crear preferencia de pago:', error);\n      throw error;\n    }\n  },\n  // Procesar pago exitoso\n  procesarPagoExitoso: async (paymentId, preferenceId) => {\n    try {\n      const response = await api.post('/pagos/procesar-exitoso', {\n        paymentId,\n        preferenceId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al procesar pago exitoso:', error);\n      throw error;\n    }\n  },\n  // Procesar pago fallido\n  procesarPagoFallido: async (paymentId, preferenceId, error) => {\n    try {\n      const response = await api.post('/pagos/procesar-fallido', {\n        paymentId,\n        preferenceId,\n        error\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al procesar pago fallido:', error);\n      throw error;\n    }\n  },\n  // Transbank - Crear transacción\n  crearTransaccionTransbank: async datosTransaccion => {\n    try {\n      const response = await api.post('/transbank/crear', datosTransaccion);\n      return response.data;\n    } catch (error) {\n      console.error('Error al crear transacción Transbank:', error);\n      throw error;\n    }\n  },\n  // Transbank - Confirmar transacción\n  confirmarTransaccionTransbank: async token => {\n    try {\n      const response = await api.post('/transbank/confirmar', {\n        token_ws: token\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al confirmar transacción Transbank:', error);\n      throw error;\n    }\n  },\n  // Transbank - Obtener estado de transacción\n  obtenerEstadoTransaccion: async token => {\n    try {\n      const response = await api.get(`/transbank/estado/${token}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener estado de transacción:', error);\n      throw error;\n    }\n  },\n  // Transbank - Reembolsar transacción\n  reembolsarTransaccion: async (token, monto) => {\n    try {\n      const response = await api.post('/transbank/reembolsar', {\n        token,\n        monto\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error al reembolsar transacción:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","servicioPagos","crearPreferencia","items","comprador","response","post","data","error","console","procesarPagoExitoso","paymentId","preferenceId","procesarPagoFallido","crearTransaccionTransbank","datosTransaccion","confirmarTransaccionTransbank","token","token_ws","obtenerEstadoTransaccion","get","reembolsarTransaccion","monto"],"sources":["C:/ferremasapi/fronted/src/servicios/servicioPagos.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const servicioPagos = {\r\n  // Crear preferencia de pago\r\n  crearPreferencia: async (items, comprador) => {\r\n    try {\r\n      const response = await api.post('/pagos/crear-preferencia', {\r\n        items,\r\n        comprador\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al crear preferencia de pago:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Procesar pago exitoso\r\n  procesarPagoExitoso: async (paymentId, preferenceId) => {\r\n    try {\r\n      const response = await api.post('/pagos/procesar-exitoso', {\r\n        paymentId,\r\n        preferenceId\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al procesar pago exitoso:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Procesar pago fallido\r\n  procesarPagoFallido: async (paymentId, preferenceId, error) => {\r\n    try {\r\n      const response = await api.post('/pagos/procesar-fallido', {\r\n        paymentId,\r\n        preferenceId,\r\n        error\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al procesar pago fallido:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Crear transacción\r\n  crearTransaccionTransbank: async (datosTransaccion) => {\r\n    try {\r\n      const response = await api.post('/transbank/crear', datosTransaccion);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al crear transacción Transbank:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Confirmar transacción\r\n  confirmarTransaccionTransbank: async (token) => {\r\n    try {\r\n      const response = await api.post('/transbank/confirmar', { token_ws: token });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al confirmar transacción Transbank:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Obtener estado de transacción\r\n  obtenerEstadoTransaccion: async (token) => {\r\n    try {\r\n      const response = await api.get(`/transbank/estado/${token}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener estado de transacción:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Transbank - Reembolsar transacción\r\n  reembolsarTransaccion: async (token, monto) => {\r\n    try {\r\n      const response = await api.post('/transbank/reembolsar', { token, monto });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al reembolsar transacción:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}