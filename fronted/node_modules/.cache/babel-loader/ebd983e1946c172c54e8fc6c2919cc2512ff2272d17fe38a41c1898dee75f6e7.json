{"ast":null,"code":"var _jsxFileName = \"C:\\\\ferrenuevo\\\\fronted\\\\src\\\\componentes\\\\TestBackend.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { testBackendConnection } from '../servicios/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestBackend = () => {\n  _s();\n  const [connectionStatus, setConnectionStatus] = useState({\n    loading: true,\n    success: false,\n    data: null,\n    error: null\n  });\n  useEffect(() => {\n    const checkConnection = async () => {\n      try {\n        const result = await testBackendConnection();\n        setConnectionStatus({\n          loading: false,\n          success: result.success,\n          data: result.data,\n          error: result.error\n        });\n      } catch (error) {\n        setConnectionStatus({\n          loading: false,\n          success: false,\n          data: null,\n          error: error.message\n        });\n      }\n    };\n    checkConnection();\n  }, []);\n  if (connectionStatus.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gray-100 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Verificando conexi\\xF3n con el backend...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-white rounded-lg shadow\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Estado de la Conexi\\xF3n con el Backend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), connectionStatus.success ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-green-600\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold\",\n        children: \"\\u2705 Conexi\\xF3n exitosa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"mt-2 p-2 bg-gray-100 rounded\",\n        children: JSON.stringify(connectionStatus.data, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-600\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold\",\n        children: \"\\u274C Error de conexi\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2\",\n        children: connectionStatus.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(TestBackend, \"N1FUwH6bIits6lvElpTtzHgg9Ss=\");\n_c = TestBackend;\nexport default TestBackend;\nvar _c;\n$RefreshReg$(_c, \"TestBackend\");","map":{"version":3,"names":["useState","useEffect","testBackendConnection","jsxDEV","_jsxDEV","TestBackend","_s","connectionStatus","setConnectionStatus","loading","success","data","error","checkConnection","result","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/ferrenuevo/fronted/src/componentes/TestBackend.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { testBackendConnection } from '../servicios/api';\r\n\r\nconst TestBackend = () => {\r\n  const [connectionStatus, setConnectionStatus] = useState({\r\n    loading: true,\r\n    success: false,\r\n    data: null,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      try {\r\n        const result = await testBackendConnection();\r\n        setConnectionStatus({\r\n          loading: false,\r\n          success: result.success,\r\n          data: result.data,\r\n          error: result.error\r\n        });\r\n      } catch (error) {\r\n        setConnectionStatus({\r\n          loading: false,\r\n          success: false,\r\n          data: null,\r\n          error: error.message\r\n        });\r\n      }\r\n    };\r\n\r\n    checkConnection();\r\n  }, []);\r\n\r\n  if (connectionStatus.loading) {\r\n    return (\r\n      <div className=\"p-4 bg-gray-100 rounded-lg\">\r\n        <p className=\"text-gray-600\">Verificando conexión con el backend...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4 bg-white rounded-lg shadow\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Estado de la Conexión con el Backend</h2>\r\n      \r\n      {connectionStatus.success ? (\r\n        <div className=\"text-green-600\">\r\n          <p className=\"font-semibold\">✅ Conexión exitosa</p>\r\n          <pre className=\"mt-2 p-2 bg-gray-100 rounded\">\r\n            {JSON.stringify(connectionStatus.data, null, 2)}\r\n          </pre>\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-red-600\">\r\n          <p className=\"font-semibold\">❌ Error de conexión</p>\r\n          <p className=\"mt-2\">{connectionStatus.error}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestBackend; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}